import glm.Vec3;
import glm.Quat;

/*! 
	\brief Interface for domain object.
	IEntity interface contains common domain attributes
	such as position and orientation.
 */
interface IEntity
{
	void addDecorator( in co.IService decorator );
	void removeDecorator( in co.IService decorator );
	void getDecoratorsForType( in co.IType type, out co.IService[] decorators );
	
	<c++
		template<typename T> inline void getDecorators( co::RefVector<T>& decorators )
		{
			co::RefVector<IService> serviceDecos;
			getDecoratorsForType( co::typeOf<T>::get(), serviceDecos );
			for( co::RefVector<IService>::iterator it = serviceDecos.begin(); it != serviceDecos.end(); ++it )
			{
				decorators.push_back( static_cast<T*>( (*it).get() ) );
			}
		}
	c++>
	
	void addObserver( in IEntityObserver observer );
	void removeObserver( in IEntityObserver observer );
	
	co.IService[] decorators;
	
	string name;

	Vec3 scale;
	Vec3 position;
	Quat orientation;
	BoundingBox bounds;
};
